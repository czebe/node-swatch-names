'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.processSwatch = exports.getColorNames = undefined;

var _colorNamer = require('color-namer');

var _colorNamer2 = _interopRequireDefault(_colorNamer);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _acoReader = require('./acoReader');

var _acoReader2 = _interopRequireDefault(_acoReader);

var _io = require('./io');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const FILE_HEADER = '// File auto generated by \'swatch-names\'. Do not modify this file directly.\n';

const getColorNames = exports.getColorNames = hexValues => {
	const allColors = [];

	_lodash2.default.forEach(hexValues, color => {
		const allNames = (0, _colorNamer2.default)(color);
		const combinedNames = _lodash2.default.map(_lodash2.default.uniqBy(_lodash2.default.sortBy(_lodash2.default.reduce(allNames, (result, color) => result.concat(color), []), 'distance'), value => value.name.toLowerCase()), c => c.name.toLowerCase().replace(' ', '-'));

		// Define color only if not already in the list
		if (!_lodash2.default.some(allColors, { color })) {
			// Loop until a free name is found
			_lodash2.default.forEach(combinedNames, name => {
				if (!_lodash2.default.some(allColors, { name })) {
					allColors.push({ color, name });
					return false;
				}
			});
		}
	});

	return allColors;
};

/**
 * Processes the supplied swatch file, saves a named swatch file and generates SCSS/JS files with color variables.
 * @param {string} swatch - Path to the input swatch file.
 * @param {string} scssPath - Path to the SCSS file to save variables.
 * @param {string} jsPath - Path to the JS file to save variables.
 */
const processSwatch = exports.processSwatch = (swatchFile, scssPath, jsPath, output) => {

	return new Promise((resolve, reject) => {
		_acoReader2.default.toJSON(swatchFile, (err, swatches) => {
			if (err) return reject(err);
			const hexValues = swatches.map(swatch => swatch.hex.toLowerCase());
			const colors = getColorNames(hexValues);

			if (scssPath) {
				const data = colors.reduce((result, color) => result + '$' + color.name + ': ' + color.color + ';\n', FILE_HEADER);
				(0, _io.saveFile)(data, scssPath, 'SCSS file saved to: ');
			}

			if (jsPath) {
				const js = colors.reduce((result, color) => result + '\t' + color.name.replace('-', '_').toUpperCase() + ': \'' + color.color + '\',\n', '');
				const data = FILE_HEADER + 'export default COLORS = {\n' + js + '};';
				(0, _io.saveFile)(data, jsPath, 'JS file saved to: ');
			}

			if (output) {
				(0, _io.saveSwatch)(output, colors).then(resolve);
			} else {
				resolve();
			}
		});
	});
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvc3dhdGNoLW5hbWVzLmpzIl0sIm5hbWVzIjpbIkZJTEVfSEVBREVSIiwiZ2V0Q29sb3JOYW1lcyIsImhleFZhbHVlcyIsImFsbENvbG9ycyIsImZvckVhY2giLCJjb2xvciIsImFsbE5hbWVzIiwiY29tYmluZWROYW1lcyIsIm1hcCIsInVuaXFCeSIsInNvcnRCeSIsInJlZHVjZSIsInJlc3VsdCIsImNvbmNhdCIsInZhbHVlIiwibmFtZSIsInRvTG93ZXJDYXNlIiwiYyIsInJlcGxhY2UiLCJzb21lIiwicHVzaCIsInByb2Nlc3NTd2F0Y2giLCJzd2F0Y2hGaWxlIiwic2Nzc1BhdGgiLCJqc1BhdGgiLCJvdXRwdXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRvSlNPTiIsImVyciIsInN3YXRjaGVzIiwic3dhdGNoIiwiaGV4IiwiY29sb3JzIiwiZGF0YSIsImpzIiwidG9VcHBlckNhc2UiLCJ0aGVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxjQUFjLGlGQUFwQjs7QUFFTyxNQUFNQyx3Q0FBaUJDLFNBQUQsSUFBZTtBQUMzQyxPQUFNQyxZQUFZLEVBQWxCOztBQUVBLGtCQUFFQyxPQUFGLENBQVVGLFNBQVYsRUFBc0JHLEtBQUQsSUFBVztBQUMvQixRQUFNQyxXQUFXLDBCQUFNRCxLQUFOLENBQWpCO0FBQ0EsUUFBTUUsZ0JBQ0wsaUJBQUVDLEdBQUYsQ0FDQyxpQkFBRUMsTUFBRixDQUNDLGlCQUFFQyxNQUFGLENBQ0MsaUJBQUVDLE1BQUYsQ0FBU0wsUUFBVCxFQUFtQixDQUFDTSxNQUFELEVBQVNQLEtBQVQsS0FBbUJPLE9BQU9DLE1BQVAsQ0FBY1IsS0FBZCxDQUF0QyxFQUE0RCxFQUE1RCxDQURELEVBQ2tFLFVBRGxFLENBREQsRUFHRVMsS0FBRCxJQUFXQSxNQUFNQyxJQUFOLENBQVdDLFdBQVgsRUFIWixDQURELEVBTUVDLENBQUQsSUFBT0EsRUFBRUYsSUFBRixDQUFPQyxXQUFQLEdBQXFCRSxPQUFyQixDQUE2QixHQUE3QixFQUFrQyxHQUFsQyxDQU5SLENBREQ7O0FBVUE7QUFDQSxNQUFJLENBQUMsaUJBQUVDLElBQUYsQ0FBT2hCLFNBQVAsRUFBa0IsRUFBQ0UsS0FBRCxFQUFsQixDQUFMLEVBQWlDO0FBQ2hDO0FBQ0Esb0JBQUVELE9BQUYsQ0FBVUcsYUFBVixFQUEwQlEsSUFBRCxJQUFVO0FBQ2xDLFFBQUksQ0FBQyxpQkFBRUksSUFBRixDQUFPaEIsU0FBUCxFQUFrQixFQUFDWSxJQUFELEVBQWxCLENBQUwsRUFBZ0M7QUFDL0JaLGVBQVVpQixJQUFWLENBQWUsRUFBQ2YsS0FBRCxFQUFRVSxJQUFSLEVBQWY7QUFDQSxZQUFPLEtBQVA7QUFDQTtBQUNELElBTEQ7QUFNQTtBQUVELEVBdkJEOztBQXlCQSxRQUFPWixTQUFQO0FBQ0EsQ0E3Qk07O0FBK0JQOzs7Ozs7QUFNTyxNQUFNa0Isd0NBQWdCLENBQUNDLFVBQUQsRUFBYUMsUUFBYixFQUF1QkMsTUFBdkIsRUFBK0JDLE1BQS9CLEtBQTBDOztBQUV0RSxRQUFPLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDdkMsc0JBQVVDLE1BQVYsQ0FBaUJQLFVBQWpCLEVBQTZCLENBQUNRLEdBQUQsRUFBTUMsUUFBTixLQUFtQjtBQUMvQyxPQUFJRCxHQUFKLEVBQVMsT0FBT0YsT0FBT0UsR0FBUCxDQUFQO0FBQ1QsU0FBTTVCLFlBQVk2QixTQUFTdkIsR0FBVCxDQUFjd0IsTUFBRCxJQUFZQSxPQUFPQyxHQUFQLENBQVdqQixXQUFYLEVBQXpCLENBQWxCO0FBQ0EsU0FBTWtCLFNBQVNqQyxjQUFjQyxTQUFkLENBQWY7O0FBRUEsT0FBSXFCLFFBQUosRUFBYztBQUNiLFVBQU1ZLE9BQU9ELE9BQU92QixNQUFQLENBQWMsQ0FBQ0MsTUFBRCxFQUFTUCxLQUFULEtBQW1CTyxTQUFTLEdBQVQsR0FBZVAsTUFBTVUsSUFBckIsR0FBNEIsSUFBNUIsR0FBbUNWLE1BQU1BLEtBQXpDLEdBQWlELEtBQWxGLEVBQXlGTCxXQUF6RixDQUFiO0FBQ0Esc0JBQVNtQyxJQUFULEVBQWVaLFFBQWYsRUFBeUIsc0JBQXpCO0FBQ0E7O0FBRUQsT0FBSUMsTUFBSixFQUFZO0FBQ1gsVUFBTVksS0FBS0YsT0FBT3ZCLE1BQVAsQ0FBYyxDQUFDQyxNQUFELEVBQVNQLEtBQVQsS0FBbUJPLFNBQVMsSUFBVCxHQUFnQlAsTUFBTVUsSUFBTixDQUFXRyxPQUFYLENBQW1CLEdBQW5CLEVBQXdCLEdBQXhCLEVBQTZCbUIsV0FBN0IsRUFBaEIsR0FBNkQsTUFBN0QsR0FBc0VoQyxNQUFNQSxLQUE1RSxHQUFvRixPQUFySCxFQUE4SCxFQUE5SCxDQUFYO0FBQ0EsVUFBTThCLE9BQU9uQyxjQUFjLDZCQUFkLEdBQThDb0MsRUFBOUMsR0FBbUQsSUFBaEU7QUFDQSxzQkFBU0QsSUFBVCxFQUFlWCxNQUFmLEVBQXVCLG9CQUF2QjtBQUNBOztBQUVELE9BQUlDLE1BQUosRUFBWTtBQUNYLHdCQUFXQSxNQUFYLEVBQW1CUyxNQUFuQixFQUNFSSxJQURGLENBQ09YLE9BRFA7QUFFQSxJQUhELE1BR087QUFDTkE7QUFDQTtBQUNELEdBdEJEO0FBdUJBLEVBeEJNLENBQVA7QUF5QkEsQ0EzQk0iLCJmaWxlIjoic3dhdGNoLW5hbWVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5hbWVyIGZyb20gJ2NvbG9yLW5hbWVyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCBhY29SZWFkZXIgZnJvbSAnLi9hY29SZWFkZXInO1xuaW1wb3J0IHsgc2F2ZVN3YXRjaCwgc2F2ZUZpbGUgfSBmcm9tICcuL2lvJztcblxuY29uc3QgRklMRV9IRUFERVIgPSAnLy8gRmlsZSBhdXRvIGdlbmVyYXRlZCBieSBcXCdzd2F0Y2gtbmFtZXNcXCcuIERvIG5vdCBtb2RpZnkgdGhpcyBmaWxlIGRpcmVjdGx5Llxcbic7XG5cbmV4cG9ydCBjb25zdCBnZXRDb2xvck5hbWVzID0gKGhleFZhbHVlcykgPT4ge1xuXHRjb25zdCBhbGxDb2xvcnMgPSBbXTtcblxuXHRfLmZvckVhY2goaGV4VmFsdWVzLCAoY29sb3IpID0+IHtcblx0XHRjb25zdCBhbGxOYW1lcyA9IG5hbWVyKGNvbG9yKTtcblx0XHRjb25zdCBjb21iaW5lZE5hbWVzID1cblx0XHRcdF8ubWFwKFxuXHRcdFx0XHRfLnVuaXFCeShcblx0XHRcdFx0XHRfLnNvcnRCeShcblx0XHRcdFx0XHRcdF8ucmVkdWNlKGFsbE5hbWVzLCAocmVzdWx0LCBjb2xvcikgPT4gcmVzdWx0LmNvbmNhdChjb2xvciksIFtdKSwgJ2Rpc3RhbmNlJyksXG5cdFx0XHRcdFx0KHZhbHVlKSA9PiB2YWx1ZS5uYW1lLnRvTG93ZXJDYXNlKClcblx0XHRcdFx0KSxcblx0XHRcdFx0KGMpID0+IGMubmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJyAnLCAnLScpXG5cdFx0XHQpO1xuXG5cdFx0Ly8gRGVmaW5lIGNvbG9yIG9ubHkgaWYgbm90IGFscmVhZHkgaW4gdGhlIGxpc3Rcblx0XHRpZiAoIV8uc29tZShhbGxDb2xvcnMsIHtjb2xvcn0pKSB7XG5cdFx0XHQvLyBMb29wIHVudGlsIGEgZnJlZSBuYW1lIGlzIGZvdW5kXG5cdFx0XHRfLmZvckVhY2goY29tYmluZWROYW1lcywgKG5hbWUpID0+IHtcblx0XHRcdFx0aWYgKCFfLnNvbWUoYWxsQ29sb3JzLCB7bmFtZX0pKSB7XG5cdFx0XHRcdFx0YWxsQ29sb3JzLnB1c2goe2NvbG9yLCBuYW1lfSk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0fSk7XG5cblx0cmV0dXJuIGFsbENvbG9ycztcbn07XG5cbi8qKlxuICogUHJvY2Vzc2VzIHRoZSBzdXBwbGllZCBzd2F0Y2ggZmlsZSwgc2F2ZXMgYSBuYW1lZCBzd2F0Y2ggZmlsZSBhbmQgZ2VuZXJhdGVzIFNDU1MvSlMgZmlsZXMgd2l0aCBjb2xvciB2YXJpYWJsZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3dhdGNoIC0gUGF0aCB0byB0aGUgaW5wdXQgc3dhdGNoIGZpbGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gc2Nzc1BhdGggLSBQYXRoIHRvIHRoZSBTQ1NTIGZpbGUgdG8gc2F2ZSB2YXJpYWJsZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30ganNQYXRoIC0gUGF0aCB0byB0aGUgSlMgZmlsZSB0byBzYXZlIHZhcmlhYmxlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IHByb2Nlc3NTd2F0Y2ggPSAoc3dhdGNoRmlsZSwgc2Nzc1BhdGgsIGpzUGF0aCwgb3V0cHV0KSA9PiB7XG5cblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRhY29SZWFkZXIudG9KU09OKHN3YXRjaEZpbGUsIChlcnIsIHN3YXRjaGVzKSA9PiB7XG5cdFx0XHRpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XG5cdFx0XHRjb25zdCBoZXhWYWx1ZXMgPSBzd2F0Y2hlcy5tYXAoKHN3YXRjaCkgPT4gc3dhdGNoLmhleC50b0xvd2VyQ2FzZSgpKTtcblx0XHRcdGNvbnN0IGNvbG9ycyA9IGdldENvbG9yTmFtZXMoaGV4VmFsdWVzKTtcblxuXHRcdFx0aWYgKHNjc3NQYXRoKSB7XG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBjb2xvcnMucmVkdWNlKChyZXN1bHQsIGNvbG9yKSA9PiByZXN1bHQgKyAnJCcgKyBjb2xvci5uYW1lICsgJzogJyArIGNvbG9yLmNvbG9yICsgJztcXG4nLCBGSUxFX0hFQURFUik7XG5cdFx0XHRcdHNhdmVGaWxlKGRhdGEsIHNjc3NQYXRoLCAnU0NTUyBmaWxlIHNhdmVkIHRvOiAnKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGpzUGF0aCkge1xuXHRcdFx0XHRjb25zdCBqcyA9IGNvbG9ycy5yZWR1Y2UoKHJlc3VsdCwgY29sb3IpID0+IHJlc3VsdCArICdcXHQnICsgY29sb3IubmFtZS5yZXBsYWNlKCctJywgJ18nKS50b1VwcGVyQ2FzZSgpICsgJzogXFwnJyArIGNvbG9yLmNvbG9yICsgJ1xcJyxcXG4nLCAnJyk7XG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBGSUxFX0hFQURFUiArICdleHBvcnQgZGVmYXVsdCBDT0xPUlMgPSB7XFxuJyArIGpzICsgJ307Jztcblx0XHRcdFx0c2F2ZUZpbGUoZGF0YSwganNQYXRoLCAnSlMgZmlsZSBzYXZlZCB0bzogJyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvdXRwdXQpIHtcblx0XHRcdFx0c2F2ZVN3YXRjaChvdXRwdXQsIGNvbG9ycylcblx0XHRcdFx0XHQudGhlbihyZXNvbHZlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59O1xuIl19