import namer from 'color-namer';
import _ from 'lodash';

import acoReader from './acoReader';
import { saveSwatch, saveFile } from './io';

const FILE_HEADER = '// File auto generated by \'swatch-names\'. Do not modify this file directly.\n';

export const getColorNames = (hexValues) => {
	const allColors = [];

	_.forEach(hexValues, (color) => {
		const allNames = namer(color);
		const combinedNames =
			_.map(
				_.uniqBy(
					_.sortBy(
						_.reduce(allNames, (result, color) => result.concat(color), []), 'distance'),
					(value) => value.name.toLowerCase()
				),
				(c) => c.name.toLowerCase().replace(' ', '-')
			);

		// Define color only if not already in the list
		if (!_.some(allColors, {color})) {
			// Loop until a free name is found
			_.forEach(combinedNames, (name) => {
				if (!_.some(allColors, {name})) {
					allColors.push({color, name});
					return false;
				}
			});
		}

	});

	return allColors;
};

/**
 * Processes the supplied swatch file, saves a named swatch file and generates SCSS/JS files with color variables.
 * @param {string} swatch - Path to the input swatch file.
 * @param {string} scssPath - Path to the SCSS file to save variables.
 * @param {string} jsPath - Path to the JS file to save variables.
 */
export const processSwatch = (swatchFile, scssPath, jsPath, output) => {

	return new Promise((resolve, reject) => {
		acoReader.toJSON(swatchFile, (err, swatches) => {
			if (err) return reject(err);
			const hexValues = swatches.map((swatch) => swatch.hex.toLowerCase());
			const colors = getColorNames(hexValues);

			if (scssPath) {
				const data = colors.reduce((result, color) => result + '$' + color.name + ': ' + color.color + ';\n', FILE_HEADER);
				saveFile(data, scssPath, 'SCSS file saved to: ');
			}

			if (jsPath) {
				const js = colors.reduce((result, color) => result + '\t' + color.name.replace('-', '_').toUpperCase() + ': \'' + color.color + '\',\n', '');
				const data = FILE_HEADER + 'export default COLORS = {\n' + js + '};';
				saveFile(data, jsPath, 'JS file saved to: ');
			}

			if (output) {
				saveSwatch(output, colors)
					.then(resolve);
			} else {
				resolve();
			}
		});
	});
};
